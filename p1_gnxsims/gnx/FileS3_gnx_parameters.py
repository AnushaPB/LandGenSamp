# This is a parameters file generated by Geonomics
# (by the gnx.make_parameters_file() function).
# parameters with levels specified in [brackets] are varied in the simulations (see run_gnx.py)


                   #   ::::::          :::    :: :::::::::::#
             #::::::    ::::   :::      ::    :: :: ::::::::::: ::#
          #:::::::::     ::            ::   :::::::::::::::::::::::::#
        #::::::::::                      :::::::::: :::::: ::::::::  ::#
      #  : ::::  ::                    ::::  : ::    :::::::: : ::  :    #
     # GGGGG :EEEE: OOOOO   NN   NN   OOOOO   MM   MM IIIIII  CCCCC SSSSS #
    # GG     EE    OO   OO  NNN  NN  OO   OO  MM   MM   II   CC     SS     #
    # GG     EE   OO     OO NN N NN OO     OO MMM MMM   II   CC     SSSSSS #
    # GG GGG EEEE OO     OO NN  NNN OO     OO MM M MM   II   CC         SS #
    # GG   G EE    OO   OO  NN   NN  OO   OO  MM   MM   II   CC        SSS #
     # GGGGG :EEEE: OOOOO   NN   NN   OOOOO   MM   MM IIIIII  CCCCC SSSSS #
      #    : ::::::::               :::::::::: ::              ::  :   : #
        #:    :::::                    :::::: :::             :::::::  #
          #    :::                      :::::  ::              ::::: #
             #  ::                      ::::                      #
                   #                                        #
                      #  :: ::    :::             #


params = {
    # --------------------------------------------------------------------------#

    # -----------------#
    # --- LANDSCAPE ---#
    # -----------------#
    'landscape': {

        # ------------#
        # --- main ---#
        # ------------#
        'main': {
            # x,y (a.k.a. j,i) dimensions of the Landscape
            'dim': (100, 100),
            # x,y resolution of the Landscape
            'res': (1, 1),
            # x,y coords of upper-left corner of the Landscape
            'ulc': (0, 0),
            # projection of the Landscape
            'prj': None,
        },  # <END> 'main'

        # --------------#
        # --- layers ---#
        # --------------#
        'layers': {

            # layer name (LAYER NAMES MUST BE UNIQUE!)
            'lyr_0': {

                # -------------------------------------#
                # --- layer num. 0: init parameters ---#
                # -------------------------------------#

                # initiating parameters for this layer
                'init': {

                    # parameters for a 'defined'-type Layer
                    'defined': {
                        # raster to use for the Layer
                        'rast': [UNIFORM ENVIRONMENTAL LAYER],
                        # point coordinates
                        'pts': None,
                        # point values
                        'vals': None,
                        # interpolation method {None, 'linear', 'cubic',
                        # 'nearest'}
                        'interp_method': None,

                    },  # <END> 'defined'

                },  # <END> 'init'

            },  # <END> layer num. 0

            # layer name (LAYER NAMES MUST BE UNIQUE!)
            'lyr_1': {

                # -------------------------------------#
                # --- layer num. 1: init parameters ---#
                # -------------------------------------#

                # initiating parameters for this layer
                'init': {

                    # parameters for a 'defined'-type Layer
                    'defined': {
                        # raster to use for the Layer
                        'rast': [NLM LAYER],
                        # point coordinates
                        'pts': None,
                        # point values
                        'vals': None,
                        # interpolation method {None, 'linear', 'cubic',
                        # 'nearest'}
                        'interp_method': None,

                    },  # <END> 'defined'

                },  # <END> 'init'

            },  # <END> layer num. 1

            # layer name (LAYER NAMES MUST BE UNIQUE!)
            'lyr_2': {

                # -------------------------------------#
                # --- layer num. 2: init parameters ---#
                # -------------------------------------#

                # initiating parameters for this layer
                'init': {

                    # parameters for a 'defined'-type Layer
                    'defined': {
                        # raster to use for the Layer
                        'rast': [NLM LAYER],
                        # point coordinates
                        'pts': None,
                        # point values
                        'vals': None,
                        # interpolation method {None, 'linear', 'cubic',
                        # 'nearest'}
                        'interp_method': None,

                    },  # <END> 'defined'

                },  # <END> 'init'

            },  # <END> layer num. 2

            #### NOTE: Individual Layers' sections can be copy-and-pasted (and
            #### assigned distinct keys and names), to create additional Layers.

        }  # <END> 'layers'

    },  # <END> 'landscape'

    # -------------------------------------------------------------------------#

    # -----------------#
    # --- COMMUNITY ---#
    # -----------------#
    'comm': {

        'species': {

            # species name (SPECIES NAMES MUST BE UNIQUE!)
            'spp_0': {

                # -----------------------------------#
                # --- spp num. 0: init parameters ---#
                # -----------------------------------#

                'init': {
                    # starting number of individs
                    'N': 10000,
                    # carrying-capacity Layer name
                    'K_layer': 'lyr_0',
                    # multiplicative factor for carrying-capacity layer
                    'K_factor': [VARIED TO CONTROL POPULATION SIZE],
                },  # <END> 'init'

                # -------------------------------------#
                # --- spp num. 0: mating parameters ---#
                # -------------------------------------#

                'mating': {
                    # age(s) at sexual maturity (if tuple, female first)
                    'repro_age': 0,
                    # whether to assign sexes
                    'sex': False,
                    # ratio of males to females
                    'sex_ratio': 1 / 1,
                    # whether P(birth) should be weighted by parental dist
                    'dist_weighted_birth': False,
                    # intrinsic growth rate
                    'R': 1,
                    # intrinsic birth rate (MUST BE 0<=b<=1)
                    'b': 0.8,
                    # expectation of distr of n offspring per mating pair
                    'n_births_distr_lambda': 2,
                    # whether n births should be fixed at n_births_dist_lambda
                    'n_births_fixed': True,
                    # ADDED BY AB: choose nearest mate
                    'choose_nearest_mate': False,
                    # ADDED BY AB: choose nearest mate
                    'inverse_dist_mating': False,
                    # radius of mate-search area
                    'mating_radius': 2,
                },  # <END> 'mating'

                # ----------------------------------------#
                # --- spp num. 0: mortality parameters ---#
                # ----------------------------------------#

                'mortality': {
                    # maximum age
                    'max_age': 3,
                    # min P(death) (MUST BE 0<=d_min<=1)
                    'd_min': 0,
                    # max P(death) (MUST BE 0<=d_max<=1)
                    'd_max': 1,
                    # width of window used to estimate local pop density
                    'density_grid_window_width': None,
                },  # <END> 'mortality'

                # ---------------------------------------#
                # --- spp num. 0: movement parameters ---#
                # ---------------------------------------#

                'movement': {
                    # whether or not the species is mobile
                    'move': True,
                    # mode of distr of movement direction
                    'direction_distr_mu': 1,
                    # concentration of distr of movement direction
                    'direction_distr_kappa': 0,
                    # 1st param of distr of movement distance
                    'movement_distance_distr_param1': 0,
                    # 2nd param of distr of movement distance
                    'movement_distance_distr_param2': [VARIED TO CONTROL MIGRATION],
                    # movement distance distr to use
                    'movement_distance_distr': 'lognormal',
                    # 1st param of distr of dispersal distance
                    'dispersal_distance_distr_param1': 0,
                    # 2nd param of distr of dispersal distance
                    'dispersal_distance_distr_param2': [VARIED TO CONTROL MIGRATION],
                    # dispersal distance distr to use
                    'dispersal_distance_distr': 'lognormal',
                    'move_surf': {
                        # move-surf Layer name
                        'layer': 'lyr_0',
                        # whether to use mixture distrs
                        'mixture': True,
                        # concentration of distrs
                        'vm_distr_kappa': 12,
                        # length of approximation vectors for distrs
                        'approx_len': 5000,
                    },  # <END> 'move_surf'

                },  # <END> 'movement'

                # ---------------------------------------------------#
                # --- spp num. 0: genomic architecture parameters ---#
                # ---------------------------------------------------#

                'gen_arch': {
                    # whether to use tskit (to record full spatial pedigree)
                    'use_tskit': False,
                    # time step interval for simplication of tskit tables
                    'tskit_simp_interval': 25,  # changed from 100
                    # whether to jitter recomb bps, only needed to correctly track num_trees
                    'jitter_breakpoints': False,
                    # file defining custom genomic arch
                    # found here /p1_gnxsims/gnx/
                    'gen_arch_file': "genomic_architecture.csv",
                    # num of loci
                    'L': 10008,
                    # num of chromosomes (doesn't matter when there is no linkage)
                    'l_c': [1],
                    # starting allele frequency (None to draw freqs randomly)
                    'start_p_fixed': 0.5,
                    # whether to start neutral locus freqs at 0
                    'start_neut_zero': False,
                    # genome-wide per-base neutral mut rate (0 to disable)
                    'mu_neut': 0,
                    # genome-wide per-base deleterious mut rate (0 to disable)
                    'mu_delet': 0,
                    # shape of distr of deleterious effect sizes
                    'delet_alpha_distr_shape': 0.2,
                    # scale of distr of deleterious effect sizes
                    'delet_alpha_distr_scale': 0.2,
                    # alpha of distr of recomb rates (default = 0.5 = unlinked)
                    'r_distr_alpha': 0.5,
                    # beta of distr of recomb rates
                    'r_distr_beta': None,
                    # whether loci should be dominant (for allele '1')
                    'dom': False,
                    # whether to allow pleiotropy
                    'pleiotropy': False,
                    # custom fn for drawing recomb rates
                    'recomb_rate_custom_fn': None,
                    # number of recomb paths to hold in memory
                    'n_recomb_paths_mem': int(1e4),
                    # total number of recomb paths to simulate
                    'n_recomb_paths_tot': int(1e5),
                    # num of crossing-over events (i.e. recombs) to simulate
                    'n_recomb_sims': 10000,
                    # whether to generate recombination paths at each timestep
                    'allow_ad_hoc_recomb': False,
                    # whether to save mutation logs
                    'mut_log': False,

                    'traits': {

                        # --------------------------#
                        # --- trait 1 parameters ---#
                        # --------------------------#
                        # trait name (TRAIT NAMES MUST BE UNIQUE!)
                        'trait_1': {
                            # trait-selection Layer name
                            'layer': 'lyr_1',
                            # polygenic selection coefficient
                            'phi': [VARIED TO CONTROL SELECTION STRENGTH],
                            # number of loci underlying trait
                            'n_loci': 4,
                            # mutation rate at loci underlying trait
                            'mu': 0,
                            # mean of distr of effect sizes
                            'alpha_distr_mu': 0.25,
                            # variance of distr of effect size
                            'alpha_distr_sigma': 0,
                            # max allowed magnitude for an alpha value
                            'max_alpha_mag': None,
                            # curvature of fitness function
                            'gamma': 1,
                            # whether the trait is universally advantageous
                            'univ_adv': False
                        },  # <END> trait 1

                        # --------------------------#
                        # --- trait 2 parameters ---#
                        # --------------------------#
                        # trait name (TRAIT NAMES MUST BE UNIQUE!)
                        'trait_2': {
                            # trait-selection Layer name
                            'layer': 'lyr_2',
                            # polygenic selection coefficient
                            'phi': [VARIED TO CONTROL SELECTION STRENGTH],
                            # number of loci underlying trait
                            'n_loci': 4,
                            # mutation rate at loci underlying trait
                            'mu': 0,
                            # mean of distr of effect sizes
                            'alpha_distr_mu': 0.25,
                            # variance of distr of effect size
                            'alpha_distr_sigma': 0,
                            # max allowed magnitude for an alpha value
                            'max_alpha_mag': None,
                            # curvature of fitness function
                            'gamma': 1,
                            # whether the trait is universally advantageous
                            'univ_adv': False
                        },  # <END> trait 2

                        #### NOTE: Individual Traits' sections can be copy-and-pasted (and
                        #### assigned distinct keys and names), to create additional Traits.

                    },  # <END> 'traits'

                },  # <END> 'gen_arch'

            },  # <END> spp num. 0

            #### NOTE: individual Species' sections can be copy-and-pasted (and
            #### assigned distinct keys and names), to create additional Species.

        },  # <END> 'species'

    },  # <END> 'comm'

    # ------------------------------------------------------------------------#

    # -------------#
    # --- MODEL ---#
    # -------------#
    'model': {
        # total Model runtime (in timesteps)
        'T': 6001,
        # min burn-in runtime (in timesteps)
        'burn_T': 100,
        # seed number
        'num': 42,

        # -----------------------------#
        # --- iterations parameters ---#
        # -----------------------------#
        'its': {
            # num iterations
            'n_its': 10,
            # whether to randomize Landscape each iteration
            'rand_landscape': False,
            # whether to randomize Community each iteration
            'rand_comm': False,
            # whether to burn in each iteration
            'repeat_burn': False,
            #whether to randomize GenomicArchitectures each iteration
            'rand_genarch':     True,
        },  # <END> 'iterations'

        # -----------------------------------#
        # --- data-collection parameters ---#
        # -----------------------------------#
        'data': {
            'sampling': {
                # sampling scheme {'all', 'random', 'point', 'transect'}
                'scheme': 'all',
                # when to collect data
                'when': 1000,
                # whether to save current Layers when data is collected
                'include_landscape': False,
                # whether to include fixed loci in VCF files
                'include_fixed_sites': True,
            },
            'format': {
                # format for genetic data {'vcf', 'fasta'}
                'gen_format': 'vcf',
                # format for vector geodata {'csv', 'shapefile', 'geojson'}
                'geo_vect_format': 'csv',
                # format for raster geodata {'geotiff', 'txt'}
                'geo_rast_format': 'geotiff',
                #format for files containing non-neutral loci
                'nonneut_loc_format':      'csv',
            },
        },  # <END> 'data'

        # -----------------------------------#
        # --- stats-collection parameters ---#
        # -----------------------------------#
        'stats': {
            # number of individs at time t
            'Nt': {
                # whether to calculate
                'calc': True,
                # calculation frequency (in timesteps)
                'freq': 1,
            },
            # heterozgosity
            'het': {
                # whether to calculate
                'calc': True,
                # calculation frequency (in timesteps)
                'freq': 10,
                # whether to mean across sampled individs
                'mean': False,
            },
            # minor allele freq
            'maf': {
                # whether to calculate
                'calc': True,
                # calculation frequency (in timesteps)
                'freq': 10,
            },
            # mean fitness
            'mean_fit': {
                # whether to calculate
                'calc': True,
                # calculation frequency (in timesteps)
                'freq': 10,
            },
            # linkage disequilibirum
            'ld': {
                # whether to calculate
                'calc': False,
                # calculation frequency (in timesteps)
                'freq': 100,
            },
        },  # <END> 'stats'

    }  # <END> 'model'

}  # <END> params
